{
  "posts": [
    {
      "id": "1",
      "title": "json-server 1",
      "author": "typicode"
    },
    {
      "id": "2",
      "title": "json-server 2",
      "author": "typicode"
    },
    {
      "vailableTaps": 0,
      "count": 8500,
      "timestamp": 1721287586,
      "id": "3"
    }
  ],
  "articles": [
    {
      "id": "1",
      "title": "React",
      "subtitle": "Что нового в React 19",
      "img": "https://habrastorage.org/r/w1560/webt/jc/hw/st/jchwst6a3nwlxlscnmuw5tdhmry.png",
      "createdAt": "07.01.2025",
      "userId": "1",
      "views": 777,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "❯ Серверные компоненты",
          "paragraphs": [
            "Серверные компоненты позволяют создавать сложные веб-приложения с помощью языка программирования JavaScript. Серверные компоненты позволяют создавать сложные веб-приложения с помощью языка программирования JavaScript."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "<!DOCTYPE html>\n<html>\n<body>\n<div id='root'></div>\n<script src='/static/js/bundle.js'></script>\n</body></html>"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Чтобы скрыть этот некрасивый 'пустой' период, разработчики стали применять 'скелетоны' — временные визуальные заглушки, которые отображались до загрузки и рендеринга реальных данных."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://habrastorage.org/webt/ef/fp/oc/effpocn_jas3pmtxbcthcdzrlim.png",
          "title": "Изображение 1"
        },
        {
          "id": "5",
          "type": "TEXT",
          "paragraphs": [
            "React усовершенствовался благодаря серверному рендерингу (Server-Side Rendering — SSR). Этот подход предполагает, что первоначальный рендеринг происходит на сервере, а не на клиенте, что позволяет отправлять пользователю HTML-код с готовым начальным интерфейсом, ускоряя его отображение. Однако даже в этом случае для показа реального содержимого страницы требуется дополнительная загрузка данных с сервера."
          ]
        },
        {
          "id": "6",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/webt/gx/tu/ho/gxtuho0dyyqmkoookmig25onde0.png",
          "title": "Изображение 2"
        },
        {
          "id": "7",
          "type": "TEXT",
          "paragraphs": [
            "Фреймворки React расширили свои возможности, чтобы улучшить пользовательский опыт, внедрив такие концепции, как генерация статического контента (Static-Site Generation — SSG) и его инкрементная регенерация (Incremental Static Regeneration — ISR)."
          ]
        },
        {
          "id": "8",
          "type": "TEXT",
          "paragraphs": [
            "SSG предполагает предварительную сборку и кэширование динамических данных во время генерации сайта. ISR дает возможность обновлять этот кэш по мере необходимости, без полной перезагрузки страницы."
          ]
        }
      ]
    },
    {
      "id": "2",
      "title": "Angular",
      "subtitle": "Использование возможностей Angular. Часть 1",
      "img": "https://kvadrat.az/uploads/articles/674638dab1126.png.pagespeed.ce.FcKKxhkATH.png",
      "createdAt": "26.01.2025",
      "userId": "1",
      "views": 198,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Binding не то, чем кажется",
          "paragraphs": [
            "Разработчики часто используют binding не то, что бы не правильно - скорее не эффективно. Часто Binding можно заменить более эффективным способом."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "paragraphs": [
            "Binding - это работа JS/TS. Но веб-приложение работает не только на JS/TS. У нас имеется и HTML и стили CSS. Правило производительности гласит: производительность системы считается по производительности самого слабого звена. JS - это слабое звено. Производительность CSS выше, чем JS."
          ]
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Так в чем же его не эффективность? Сейчас покажу. У нас имеется какой-то UI компонент. Сейчас он выглядит достаточно просто, примерно так:"
          ]
        },
        {
          "id": "4",
          "type": "TEXT",
          "paragraphs": [
            "В репозитории по ссылке выше - это компонент 'app‑test‑filter-1'"
          ]
        },
        {
          "id": "5",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/95e/466/5e1/95e4665e1d881b4bee397c64a3941620.jpg",
          "title": "самый простой компонент, который что-то там будет фильтровать в будущем"
        },
        {
          "id": "6",
          "type": "TEXT",
          "paragraphs": [
            "Итак, задача. т.к. компонент будет использоваться везде, то TITLE компонента можно будет изменять. Это простейшая задача, которая решается обычным @Input(). Большинство разработчиков сделают именно так. К примеру - Primeng. Вот код из их документации. А вот и как это выглядит:"
          ]
        },
        {
          "id": "7",
          "type": "IMAGE",
          "src": "https://habrastorage.org/r/w1560/getpro/habr/upload_files/378/088/7af/3780887af70e29ec24fd5b90e9811718.jpg",
          "title": "Я часто буду показывать в эту библиотеку, ибо очень много работал с ней."
        },
        {
          "id": "8",
          "type": "TEXT",
          "paragraphs": [
            "Листинг нашего же компонента будет таким:"
          ]
        },
        {
          "id": "9",
          "type": "CODE",
          "code": "@Component({\nselector: 'app-test-filter-1',\nstandalone: true,\n  imports: [\n     MatIconButton\n],\n  templateUrl: './test-filter-1.component.html',\n  styleUrl: './test-filter-1.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TestFilter1Component {\n  @Input()\n  public title: string = '';\n}"
        }
      ]
    },
    {
      "id": "3",
      "title": "Next.js",
      "subtitle": "Next.js. Технология современной веб-разработки",
      "img": "https://devtop.io/wp-content/uploads/2022/11/Next-JS-1024x614.png",
      "createdAt": "26.01.2025",
      "userId": "1",
      "views": 552,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "paragraphs": [
            "Современная веб-разработка требует эффективных инструментов, способных справляться с высокими стандартами производительности и пользовательского опыта. В этой статье мы рассмотрим Next.js, мощный JavaScript-фреймворк и новаторское решение для создания современных веб-приложений на основе React, созданный компанией Vercel. Узнаем, как он помогает разработчикам создавать высокопроизводительные, масштабируемые и SEO-дружественные веб-приложения. Мы также глубоко погрузимся в его функциональность, рассмотрим особенности, такие как серверный рендеринг и генерация статических сайтов, и предоставим примеры использования. Давайте разберем, как Next.js становится ключевым инструментом в современной веб-разработке, обеспечивая идеальный баланс между разнообразием функций и оптимальной производительностью."
          ]
        },
        {
          "id": "2",
          "type": "TEXT",
          "title": "Ключевые особенности Next.js",
          "paragraphs": [
            "Next.js обладает множеством функций, которые делают его привлекательным для разработчиков. Являясь библиотекой для создания пользовательских интерфейсов, Next.js также может считаться бэкенд инструментом благодаря наличию Node.js и способности аутсорсить часть выполняемой логики на сторону сервера. Давайте рассмотрим основные возможности Next.js."
          ]
        },
        {
          "id": "3",
          "type": "TEXT",
          "title": "1. Рендеринг на стороне сервера (SSR) и генерация статических сайтов (SSG)",
          "paragraphs": [
            "Благодаря инициализации серверной прослойки на Node.js, Next.js отлично справляется с предварительным рендерингом страниц на стороне сервера, что позволяет ускорить загрузку и улучшить SEO за счет передачи HTML-контента непосредственно в браузер. Эта техника позволяет усовершенствовать пользовательский опыт и видимость в поисковых системах."
          ]
        },
        {
          "id": "4",
          "type": "TEXT",
          "title": "2. Автоматическое разделение кода",
          "paragraphs": [
            "Фреймворк автоматически разделяет код на более мелкие, управляемые куски. Это позволяет загружать только необходимые компоненты, сокращая время начальной загрузки страницы и повышая ее производительность."
          ]
        },
        {
          "id": "5",
          "type": "TEXT",
          "title": "3. Встроенная поддержка CSS",
          "paragraphs": [
            "Next.js легко интегрируется с различными библиотеками CSS-in-JS, что упрощает стилизацию и избавляет от необходимости использования дополнительных настроек и инструментов."
          ]
        },
        {
          "id": "6",
          "type": "TEXT",
          "title": "4. Горячая замена модулей (HMR)",
          "paragraphs": [
            "HMR позволяет разработчикам видеть изменения в реальном времени, не требуя обновления страницы, что делает процесс разработки более эффективным и приятным."
          ]
        },
        {
          "id": "7",
          "type": "TEXT",
          "title": "5. Роутинг на основании файловой системы",
          "paragraphs": [
            "Создание роутов в приложении Next.js не требует особых усилий. Структура папок и файлов определяет пути доступа клиентской части к компонентам приложения. Также Next.js поддерживает ключевые слова в названиях файловой системы для разделения поведения и контекста сервера и клиента. В частности, компоненты внутри папки, названной  \"api\", будут считаться API эндпоинтами, а не компонентами, и не будут включены в клиентскую часть приложения автоматически.  Эта возможность также облегчает интеграцию функциональности бэкенда с фронтендом, обеспечивая динамическую работу с данными."
          ]
        },
        {
          "id": "8",
          "type": "TEXT",
          "title": "Методики структурирования: Page роутер и App роутер",
          "paragraphs": [
            "Изначально Next.js поддерживал так называемую Page структуру построения приложения, попутно работая над более интуитивно простой App cтруктурой. App роутер официально вышел из беты в марте текущего года. Давайте рассмотрим более подробно основные принципы каждой из структур."
          ]
        }
      ]
    },
    {
      "id": "4",
      "title": "Rust: Безопасность памяти без сборщика мусора",
      "subtitle": "Как Rust решает проблемы безопасности памяти",
      "img": "https://example.com/images/rust_logo.png",
      "createdAt": "30.04.2025",
      "userId": "1",
      "views": 8910,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Введение",
          "paragraphs": [
            "Rust — это системный язык программирования, созданный для обеспечения высокой производительности и безопасности памяти."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "fn main() {\n    let x = 5;\n    println!(\"The value of x is: {x}\");\n}"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Основной особенностью Rust является система владения и заимствования, которая позволяет избежать проблем с утечками памяти и безопасностью."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/rust_memory_safety.png",
          "title": "Безопасность памяти в Rust"
        }
      ]
    },
    {
      "id": "5",
      "title": "Go: Простота и производительность",
      "subtitle": "Почему Go стал популярным языком для разработки серверных приложений",
      "img": "https://example.com/images/go_logo.png",
      "createdAt": "05.06.2025",
      "userId": "1",
      "views": 2345,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "История создания",
          "paragraphs": [
            "Go был создан инженерами Google в 2009 году как ответ на растущие потребности в разработке высокопроизводительных и масштабируемых систем."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "package main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Простота синтаксиса и высокая производительность делают Go идеальным выбором для разработки серверных приложений и микросервисов."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/go_performance.png",
          "title": "Производительность Go"
        }
      ]
    },
    {
      "id": "6",
      "title": "Swift: Язык будущего для iOS-разработки",
      "subtitle": "Новые возможности Swift 6 и их влияние на разработку мобильных приложений",
      "img": "https://example.com/images/swift_logo.png",
      "createdAt": "12.08.2025",
      "userId": "1",
      "views": 6789,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Введение",
          "paragraphs": [
            "Swift — это мощный и интуитивно понятный язык программирования, созданный Apple для разработки приложений под macOS, iOS, watchOS и tvOS."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "let greeting = \"Hello, World!\"\nprint(greeting)"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Swift 6 предлагает новые функции, такие как асинхронная обработка событий и улучшенная поддержка многопоточности, что делает его еще более привлекательным для разработчиков."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/swift_features.png",
          "title": "Новые возможности Swift 6"
        }
      ]
    },
    {
      "id": "7",
      "title": "C++: Современные подходы к программированию",
      "subtitle": "Как C++ эволюционирует и адаптируется к новым требованиям индустрии",
      "img": "https://example.com/images/cpp_logo.png",
      "createdAt": "25.09.2025",
      "userId": "1",
      "views": 1011,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Исторический контекст",
          "paragraphs": [
            "C++ был создан Бьярне Страуструпом в начале 1980-х годов как расширение языка C, добавив объектно-ориентированные возможности."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "#include <iostream>\nint main() {\n    std::cout << \"Hello, World!\" << std::endl;\n    return 0;\n}"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Современные стандарты C++, такие как C++17 и C++20, вводят новые концепции, такие как модули и концепты, что делает язык более мощным и удобным для использования."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/cpp_modern_features.png",
          "title": "Современные особенности C++"
        }
      ]
    },
    {
      "id": "8",
      "title": "JavaScript: Новые возможности ES2025",
      "subtitle": "Что ждет нас в будущем стандарта JavaScript",
      "img": "https://example.com/images/javascript_logo.png",
      "createdAt": "15.10.2025",
      "userId": "1",
      "views": 4321,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Предварительный обзор",
          "paragraphs": [
            "ES2025 обещает стать одним из самых значительных обновлений JavaScript за последние годы, вводя множество новых функций и улучшений."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "const greet = () => console.log('Hello, World!');\ngreet();"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Среди ожидаемых нововведений — поддержка распределенных вычислений, улучшенные механизмы обработки ошибок и новый синтаксис для работы с асинхронными операциями."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/javascript_es2025_features.png",
          "title": "Новые возможности ES2025"
        }
      ]
    },
    {
      "id": "9",
      "title": "R: Анализ данных и машинное обучение",
      "subtitle": "Как R помогает исследователям и аналитикам решать сложные задачи",
      "img": "https://example.com/images/r_logo.png",
      "createdAt": "22.11.2025",
      "userId": "1",
      "views": 9876,
      "type": [
        "SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Введение в R",
          "paragraphs": [
            "R — это язык программирования и программное окружение для статистических расчетов и графического представления данных."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "x <- c(1, 2, 3)\ny <- c(4, 5, 6)\nz <- data.frame(x, y)"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Благодаря обширной библиотеке пакетов, таких как tidyverse и caret, R стал незаменимым инструментом для анализа данных и машинного обучения."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/r_data_analysis.png",
          "title": "Анализ данных в R"
        }
      ]
    },
    {
      "id": "10",
      "title": "Julia: Высокопроизводительные научные вычисления",
      "subtitle": "Почему Julia стала популярной среди ученых и инженеров",
      "img": "https://example.com/images/julia_logo.png",
      "createdAt": "03.12.2025",
      "userId": "1",
      "views": 2468,
      "type": [
        "SCIENCE"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "История создания",
          "paragraphs": [
            "Julia была создана в 2012 году группой исследователей из Массачусетского технологического института с целью объединить высокую производительность и удобство использования."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "function greet()\n    println(\"Hello, World!\")\nend\ngreet()"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Julia отличается своей скоростью, сравнимой с C и Fortran, но при этом обладает простым и выразительным синтаксисом, близким к MATLAB."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/julia_performance.png",
          "title": "Высокопроизводительные вычисления в Julia"
        }
      ]
    },
    {
      "id": "11",
      "title": "Haskell: Функциональное программирование в действии",
      "subtitle": "Как Haskell меняет подход к решению задач",
      "img": "https://example.com/images/haskell_logo.png",
      "createdAt": "14.01.2026",
      "userId": "1",
      "views": 1357,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Функциональное программирование",
          "paragraphs": [
            "Haskell — это чисто функциональный язык программирования, основанный на принципах математической логики и теории категорий."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "greet :: String -> IO ()\ngreet name = putStrLn $ \"Hello, \" ++ name ++ \"!\""
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Благодаря строгому контролю типов и отсутствию побочных эффектов, Haskell обеспечивает высокий уровень надежности и предсказуемости кода."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/haskell_functional_programming.png",
          "title": "Функциональное программирование в Haskell"
        }
      ]
    },
    {
      "id": "12",
      "title": "Ruby: Простота и элегантность",
      "subtitle": "Почему Ruby остается популярным среди веб-разработчиков",
      "img": "https://example.com/images/ruby_logo.png",
      "createdAt": "28.02.2026",
      "userId": "1",
      "views": 3698,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "История Ruby",
          "paragraphs": [
            "Ruby был создан Юкихиро Мацумото в середине 1990-х годов с целью создать язык, который бы сочетал простоту и мощь."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "puts \"Hello, World!\""
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Элегантный синтаксис и богатая экосистема библиотек, включая популярный фреймворк Rails, делают Ruby отличным выбором для быстрой разработки веб-приложений."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/ruby_elegant_code.png",
          "title": "Элегантный код на Ruby"
        }
      ]
    },
    {
      "id": "13",
      "title": "Dart: Современный язык для Flutter-разработки",
      "subtitle": "Преимущества Dart в создании кросс-платформенных приложений",
      "img": "https://example.com/images/dart_logo.png",
      "createdAt": "18.03.2026",
      "userId": "1",
      "views": 7410,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Flutter и Dart",
          "paragraphs": [
            "Dart был создан Google в 2011 году и получил широкую известность благодаря использованию в рамках фреймворка Flutter для разработки мобильных приложений."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "void main() {\n  print('Hello, World!');\n}"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Dart сочетает в себе сильные стороны объектно-ориентированного и функционального программирования, обеспечивая высокую производительность и удобство разработки."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/dart_flutter_app.png",
          "title": "Кросс-платформенное приложение на Dart"
        }
      ]
    },
    {
      "id": "14",
      "title": "Scala: Объединение лучших черт ООП и ФП",
      "subtitle": "Как Scala улучшает процесс разработки корпоративных приложений",
      "img": "https://example.com/images/scala_logo.png",
      "createdAt": "27.04.2026",
      "userId": "1",
      "views": 5281,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Объектно-функциональное программирование",
          "paragraphs": [
            "Scala — это современный язык программирования, сочетающий принципы объектно-ориентированного и функционального программирования."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "object HelloWorld {\n  def main(args: Array[String]): Unit =\n    println(\"Hello, World!\")\n}"
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Scala особенно популярна в корпоративной среде благодаря своей интеграции с JVM и поддержке сложных архитектурных решений."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/scala_corporate_applications.png",
          "title": "Корпоративные приложения на Scala"
        }
      ]
    },
    {
      "id": "15",
      "title": "Elixir: Масштабируемость и надежность",
      "subtitle": "Как Elixir справляется с высокими нагрузками в реальном времени",
      "img": "https://example.com/images/elixir_logo.png",
      "createdAt": "16.05.2026",
      "userId": "1",
      "views": 6123,
      "type": [
        "IT"
      ],
      "blocks": [
        {
          "id": "1",
          "type": "TEXT",
          "title": "Масштабируемые системы",
          "paragraphs": [
            "Elixir — это функциональный язык программирования, построенный поверх виртуальной машины Erlang, известной своей надежностью и способностью справляться с высокими нагрузками."
          ]
        },
        {
          "id": "2",
          "type": "CODE",
          "code": "IO.puts \"Hello, World!\""
        },
        {
          "id": "3",
          "type": "TEXT",
          "paragraphs": [
            "Благодаря своим возможностям параллельного выполнения процессов и устойчивости к сбоям, Elixir идеально подходит для разработки высоконагруженных систем реального времени."
          ]
        },
        {
          "id": "4",
          "type": "IMAGE",
          "src": "https://example.com/images/elixir_scalability.png",
          "title": "Масштабируемость Elixir"
        }
      ]
    }
  ],
  "comments": [
    {
      "id": "1",
      "text": "some comment",
      "articleId": "1",
      "userId": "1"
    },
    {
      "id": "2",
      "text": "Muu-muu Muu-muu Muu-muu Muu-muu Muu-muu ",
      "articleId": "1",
      "userId": "3"
    },
    {
      "id": "3",
      "text": "Rar rar rar rar rar rar rar rar rar rar ",
      "articleId": "1",
      "userId": "2"
    },
    {
      "text": "dsadsdsdsa",
      "articleId": "1",
      "userId": "1",
      "id": "Rh6M63G"
    },
    {
      "text": "123",
      "articleId": "1",
      "userId": "2",
      "id": "VVeQJfL"
    },
    {
      "text": "Hello from Dinoland",
      "articleId": "1",
      "userId": "2",
      "id": "-PeaY8-"
    },
    {
      "text": "last comment today",
      "articleId": "1",
      "userId": "2",
      "id": "uRPQjUG"
    },
    {
      "text": "last comment today",
      "articleId": "1",
      "userId": "2",
      "id": "ye-lUQz"
    },
    {
      "text": "dddlast comment today",
      "articleId": "1",
      "userId": "2",
      "id": "I2DNSjL"
    },
    {
      "text": "Wow, Angular is cool!",
      "articleId": "2",
      "userId": "1",
      "id": "X1EMbg_"
    },
    {
      "text": "Cool, i really like next.js",
      "articleId": "3",
      "userId": "2",
      "id": "I0fYcpx"
    }
  ],
  "users": [
    {
      "id": "1",
      "username": "admin",
      "password": "123",
      "role": "ADMIN",
      "avatar": "https://avatars.githubusercontent.com/u/103450915?v=4"
    },
    {
      "id": "2",
      "username": "user",
      "password": "123",
      "role": "USER",
      "avatar": "https://artbreeder.b-cdn.net/imgs/32a11d35fc07075fcf994cdaebfd.jpeg"
    },
    {
      "id": "3",
      "username": "Meduza",
      "password": "123",
      "role": "USER",
      "avatar": "https://artbreeder.b-cdn.net/imgs/830e379a404fd2264bc42b714886.jpeg"
    }
  ],
  "profile": [
    {
      "id": "1",
      "firstname": "Roman",
      "lastname": "Pellya",
      "age": 22,
      "currency": "EUR",
      "country": "Russia",
      "city": "Saint-P.",
      "username": "admin",
      "avatar": "https://avatars.githubusercontent.com/u/103450915?v=4"
    },
    {
      "id": "2",
      "firstname": "Dino",
      "lastname": "Rrar",
      "age": 11,
      "currency": "RUB",
      "country": "Kazakhstan",
      "city": "Almaty",
      "username": "user",
      "avatar": "https://artbreeder.b-cdn.net/imgs/32a11d35fc07075fcf994cdaebfd.jpeg"
    }
  ]
}